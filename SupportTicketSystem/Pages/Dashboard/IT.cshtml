@page
@model SupportTicketSystem.Pages.Dashboard.ITModel
@{
    ViewData["Title"] = "پنل IT";
    Layout = "_Layout";
}

<div class="min-h-screen flex bg-gray-100 font-vazir">
    <!-- Mobile Menu -->
    <div class="md:hidden fixed top-4 right-4 z-50">
        <button id="menuToggle" class="bg-[#1e293b] text-white p-2 rounded-md shadow-md">☰</button>
    </div>

    <!-- Sidebar -->
    <aside id="sidebar" class="bg-[#1e293b] text-white w-64 p-6 space-y-4 transform md:translate-x-0 -translate-x-full fixed md:relative top-0 left-0 h-full md:h-auto z-40 transition-transform duration-300 ease-in-out rounded-r-xl shadow-2xl">
        <h2 class="text-xl font-bold border-b border-gray-600 pb-4 mb-4">@Model.DisplayName</h2>
        <nav class="flex-1 space-y-2 text-sm font-medium">
            <a href="#" class="flex items-center gap-3 px-4 py-2 rounded-lg hover:bg-blue-800">📥 درخواست‌ها</a>
            <a href="#" class="flex items-center gap-3 px-4 py-2 rounded-lg hover:bg-blue-800">📊 آمار</a>
        </nav>
    </aside>

    <!-- Overlay (for mobile) -->
    <div id="overlay" class="fixed inset-0 bg-black bg-opacity-40 z-30 hidden md:hidden"></div>

    <!-- Main -->
    <main class="flex-1 p-6 transition-all w-full">
        <!-- Status Cards -->
        <div id="status-cards" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6"></div>
        <!-- Ticket Table -->
        <div class="bg-white rounded-lg shadow p-6">
            <h2 class="text-xl font-semibold mb-4">درخواست‌های کاربران</h2>
            <div class="overflow-x-auto">
                <table class="w-full text-sm text-right border-collapse">
                    <thead class="bg-gray-100 text-gray-700">
                        <tr>
                            <th class="px-4 py-2">#</th>
                            <th class="px-4 py-2">کاربر</th>
                            <th class="px-4 py-2">عنوان</th>
                            <th class="px-4 py-2">توضیح</th>
                            <th class="px-4 py-2">اولویت</th>
                            <th class="px-4 py-2">فایل</th>
                            <th class="px-4 py-2">وضعیت</th>
                            <th class="px-4 py-2">عملیات</th>
                        </tr>
                    </thead>
                    <tbody id="ticketTable" class="text-gray-800">
                        <!-- Paginated Rows -->
                    </tbody>
                </table>
                <!-- Pagination Controls -->
                <div id="pagination" class="flex justify-center mt-4 gap-1 flex-wrap"></div>
            </div>
        </div>
    </main>
</div>

@section Scripts {
    <script type="module">
        import { renderStatusCards } from '/js/components/renderStatusCards.js';

        const ROWS_PER_PAGE = 10;
        let currentPage = 1;
        let allTickets = [];

        function paginateData(data, page) {
            const start = (page - 1) * ROWS_PER_PAGE;
            return data.slice(start, start + ROWS_PER_PAGE);
        }

        function renderPagination(totalItems) {
            const pageCount = Math.ceil(totalItems / ROWS_PER_PAGE);
            const pagination = document.getElementById("pagination");
            pagination.innerHTML = "";

            for (let i = 1; i <= pageCount; i++) {
                const btn = document.createElement("button");
                btn.textContent = i;
                btn.className = `px-3 py-1 border rounded mx-1 mb-1 ${i === currentPage ? 'bg-blue-600 text-white' : 'bg-white text-blue-600'}`;
                btn.addEventListener("click", () => {
                    currentPage = i;
                    renderTable();
                });
                pagination.appendChild(btn);
            }
        }

        function renderTable() {
            const table = document.getElementById("ticketTable");
            table.innerHTML = "";

            const paginated = paginateData(allTickets, currentPage);
            paginated.forEach((item, index) => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td class="border px-4 py-2">${(currentPage - 1) * ROWS_PER_PAGE + index + 1}</td>
                    <td class="border px-4 py-2">${item.userName}</td>
                    <td class="border px-4 py-2">${item.title}</td>
                    <td class="border px-4 py-2">${item.description}</td>
                    <td class="border px-4 py-2">${item.priority}</td>
                    <td class="border px-4 py-2">
                        ${item.fileUrl ? `<a href="${item.fileUrl}" class="text-blue-600 underline" target="_blank">دانلود</a>` : '—'}
                    </td>
                    <td class="border px-4 py-2">${item.status}</td>
                    <td class="border px-4 py-2">
                        <select data-id="${item.id}" class="statusUpdate border rounded p-1 text-sm">
                            <option>در انتظار بررسی</option>
                            <option>در حال انجام</option>
                            <option>انجام شده</option>
                            <option>باطل شده</option>
                        </select>
                    </td>
                `;
                table.appendChild(row);
            });

            document.querySelectorAll(".statusUpdate").forEach(select => {
                const statusCell = select.closest("tr").children[6];
                select.value = statusCell.textContent.trim();

                select.addEventListener("change", async (e) => {
                    const id = select.dataset.id;
                    const newStatus = e.target.value;
                    try {
                        await axios.put(`/api/tickets/${id}/status`, { status: newStatus });
                        const ticket = allTickets.find(t => t.id == id);
                        if (ticket) ticket.status = newStatus;
                        renderCardsFromLocal();
                        renderTable();
                    } catch {
                        alert("خطا در تغییر وضعیت");
                    }
                });
            });
        }

        function renderCardsFromLocal() {
            const summary = {
                pending: allTickets.filter(t => t.status === "در انتظار بررسی").length,
                inprogress: allTickets.filter(t => t.status === "در حال انجام").length,
                done: allTickets.filter(t => t.status === "انجام شده").length,
                canceled: allTickets.filter(t => t.status === "باطل شده").length
            };
            renderStatusCards("status-cards", summary);
        }

        document.addEventListener("DOMContentLoaded", async () => {
            const res = await axios.get("/api/dashboard/it");
            allTickets = res.data;
            renderCardsFromLocal();
            renderPagination(allTickets.length);
            renderTable();
        });
    </script>

    <script src="~/js/sidebar.js"></script>
}
