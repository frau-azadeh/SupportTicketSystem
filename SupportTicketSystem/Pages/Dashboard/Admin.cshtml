@page
@model SupportTicketSystem.Pages.Dashboard.AdminModel
@{
    ViewData["Title"] = "پنل مدیریت";
    Layout = "_Layout";
}

<div class="min-h-screen flex bg-gray-100 font-vazir">
    <!-- Mobile Sidebar Toggle -->
    <div class="md:hidden fixed top-4 right-4 z-50">
        <button id="menuToggle" class="bg-[#1e293b] text-white p-2 rounded-md shadow-md focus:outline-none">
            ☰
        </button>
    </div>

    <!-- Sidebar -->
    <aside id="sidebar" class="bg-[#1e293b] text-white w-64 flex-shrink-0 p-6 space-y-4 transform md:translate-x-0 -translate-x-full fixed md:relative md:top-0 top-0 left-0 h-full md:h-auto z-40 transition-transform duration-300 ease-in-out rounded-r-xl shadow-2xl">
        <h2 class="text-xl font-bold border-b border-gray-600 pb-4 mb-4">پنل مدیریت</h2>
        <nav class="flex-1 space-y-2 text-sm font-medium">
            <a href="#" class="flex items-center gap-3 px-4 py-2 rounded-lg hover:bg-blue-800">✔ کاربران</a>
            <a href="#" class="flex items-center gap-3 px-4 py-2 rounded-lg hover:bg-blue-800">☰ تیکت‌ها</a>
            <a href="#" class="flex items-center gap-3 px-4 py-2 rounded-lg hover:bg-blue-800">➕ گزارش‌ها</a>
        </nav>
    </aside>

    <!-- Overlay -->
    <div id="overlay" class="fixed inset-0 bg-black bg-opacity-40 z-30 hidden md:hidden"></div>

    <!-- Main content -->
    <main class="flex-1 p-4 md:p-6 grid grid-cols-1">
        <!--chart-->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <div class="bg-white rounded-lg shadow p-4 ">
                <h3 class="text-lg font-semibold mb-3 text-center">توزیع کارها بین کارشناسان</h3>
                <div class="w-full">
                    <canvas id="donutChart" class="w-full h-[300px]"></canvas>
                </div>
            </div>
            <div class="bg-white rounded-lg shadow p-4 ">
                <h3 class="text-lg font-semibold mb-3 text-center">وضعیت‌ کارها برای هر کارشناس</h3>
                <div class="w-full">
                    <canvas id="barChart" class="w-full h-[300px]"></canvas>
                </div>
            </div>
        </div>




        <!-- Status Cards -->
        <div class="grid grid-cols-1 sm:grid-cols-1 lg:grid-cols-4 gap-4 mb-6">
            <div class="bg-yellow-100 border border-yellow-300 text-yellow-800 rounded-lg p-4 shadow ">
                <h3 class="text-lg font-semibold mb-1">در انتظار بررسی</h3>
                <p id="pending-count" class="text-2xl font-bold">0</p>
            </div>
            <div class="bg-blue-100 border border-blue-300 text-blue-800 rounded-lg p-4 shadow">
                <h3 class="text-lg font-semibold mb-1">در حال انجام</h3>
                <p id="inprogress-count" class="text-2xl font-bold">0</p>
            </div>
            <div class="bg-green-100 border border-green-300 text-green-800 rounded-lg p-4 shadow">
                <h3 class="text-lg font-semibold mb-1">انجام شده</h3>
                <p id="done-count" class="text-2xl font-bold">0</p>
            </div>
            <div class="bg-red-100 border border-red-300 text-red-800 rounded-lg p-4 shadow">
                <h3 class="text-lg font-semibold mb-1">باطل شده</h3>
                <p id="canceled-count" class="text-2xl font-bold">0</p>
            </div>
        </div>

        <!-- Ticket Table -->
        <div class="bg-white rounded-lg shadow p-4 overflow-x-auto">
            <div class="flex flex-wrap items-center justify-between gap-4 mb-4">
                <h2 class="text-xl font-semibold whitespace-nowrap">تیکت‌های ثبت‌شده</h2>
                <div class="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
                    <input type="text" id="searchInput" placeholder="جستجو بر اساس نام کاربر..." class="border rounded px-3 py-1 text-sm w-full sm:w-auto" />
                    <select id="statusFilter" class="border rounded px-3 py-1 text-sm w-full sm:w-auto">
                        <option value="">فیلتر وضعیت</option>
                        <option>در انتظار بررسی</option>
                        <option>در حال انجام</option>
                        <option>انجام شده</option>
                        <option>باطل شده</option>
                    </select>
                </div>
            </div>

            <table class="w-full text-sm text-right border-collapse min-w-[600px] rounded-md">
                <thead class="bg-gray-100 text-gray-700 rounded-md">
                    <tr>
                        <th class="px-4 py-2">#</th>
                        <th class="px-4 py-2">کاربر</th>
                        <th class="px-4 py-2">عنوان</th>
                        <th class="px-4 py-2">وضعیت</th>
                        <th class="px-4 py-2">ارجاع به</th>
                        <th class="px-4 py-2">عملیات</th>
                    </tr>
                </thead>
                <tbody id="ticketTable" class="text-gray-800">
                    <!-- Paginated Rows -->
                </tbody>
            </table>

            <!-- Pagination Controls -->
            <div id="pagination" class="flex justify-center mt-4 gap-1 flex-wrap"></div>
        </div>
    </main>
</div>


@section Scripts {
    <script>
        const sidebar = document.getElementById("sidebar");
        const toggle = document.getElementById("menuToggle");
        const overlay = document.getElementById("overlay");
        const ROWS_PER_PAGE = 10;
        let allTickets = [];
        let itUsers = [];
        let currentPage = 1;

        toggle?.addEventListener("click", () => {
            sidebar.classList.toggle("-translate-x-full");
            overlay.classList.toggle("hidden");
        });

        overlay?.addEventListener("click", () => {
            sidebar.classList.add("-translate-x-full");
            overlay.classList.add("hidden");
        });

        async function loadTickets() {
            try {
                const res = await axios.get("/api/dashboard/admin");
                const { tickets, summary } = res.data;
                itUsers = res.data.itUsers;
                allTickets = tickets;
                currentPage = 1;
                updateCounts(summary);
                applyFilters();
            } catch (err) {
                console.error("Error loading tickets:", err);
            }
        }

        function updateCounts(summary) {
            document.getElementById("pending-count").textContent = summary.pending;
            document.getElementById("inprogress-count").textContent = summary.inprogress;
            document.getElementById("done-count").textContent = summary.done;
            document.getElementById("canceled-count").textContent = summary.canceled;
        }

        function applyFilters() {
            const search = document.getElementById("searchInput").value.trim().toLowerCase();
            const status = document.getElementById("statusFilter").value;
            const filtered = allTickets.filter(t => {
                const matchName = t.userName.toLowerCase().includes(search);
                const matchStatus = !status || t.status === status;
                return matchName && matchStatus;
            });
            renderPaginated(filtered);
        }

        function renderPaginated(tickets) {
            const start = (currentPage - 1) * ROWS_PER_PAGE;
            const pageData = tickets.slice(start, start + ROWS_PER_PAGE);
            renderTickets(pageData);
            renderPagination(tickets.length);
        }

        function renderTickets(tickets) {
            const table = document.getElementById("ticketTable");
            table.innerHTML = "";
            tickets.forEach((item, index) => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td class="border px-4 py-2">${(currentPage - 1) * ROWS_PER_PAGE + index + 1}</td>
                    <td class="border px-4 py-2">${item.userName}</td>
                    <td class="border px-4 py-2">${item.title}</td>
                    <td class="border px-4 py-2">${item.status}</td>
                    <td class="border px-4 py-2">
                        <select class="assign-dropdown border rounded px-2 py-1 text-sm">
                            <option value="">انتخاب کارشناس</option>
                            ${itUsers.map(u => `
                                <option value="${u.id}" ${u.id === item.assignedToId ? 'selected' : ''}>${u.fullName}</option>
                            `).join('')}
                        </select>
                    </td>
                    <td class="border px-4 py-2">
                        <button class="update-btn bg-blue-500 text-white px-3 py-1 rounded text-xs" data-id="${item.id}">ثبت</button>
                    </td>
                `;
                table.appendChild(row);
            });
        }

        function renderPagination(totalRows) {
            const pagination = document.getElementById("pagination");
            const pageCount = Math.ceil(totalRows / ROWS_PER_PAGE);
            pagination.innerHTML = "";
            for (let i = 1; i <= pageCount; i++) {
                const btn = document.createElement("button");
                btn.textContent = i;
                btn.className = `px-3 py-1 border rounded ${i === currentPage ? 'bg-blue-600 text-white' : 'bg-white text-blue-600'}`;
                btn.addEventListener("click", () => {
                    currentPage = i;
                    applyFilters();
                });
                pagination.appendChild(btn);
            }
        }

        document.addEventListener("click", async (e) => {
            if (e.target.classList.contains("update-btn")) {
                const id = e.target.dataset.id;
                const dropdown = e.target.closest("tr").querySelector("select.assign-dropdown");
                const userId = dropdown.value;
                await axios.post(`/api/dashboard/assign/${id}`, { userId });
                await loadTickets();
            }
        });

        document.addEventListener("DOMContentLoaded", () => {
            loadTickets();
            document.getElementById("searchInput").addEventListener("input", applyFilters);
            document.getElementById("statusFilter").addEventListener("change", applyFilters);
        });
    </script>
    <canvas id="donutChart"></canvas>
    <canvas id="barChart"></canvas>


    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", async () => {
            try {
                const res = await axios.get("/api/dashboard/admin");
                const tickets = res.data.tickets;
                const itUsers = res.data.itUsers;

                // 1. Donut Chart - تعداد تیکت‌های هر کارشناس
                const ticketCountByUser = {};
                tickets.forEach(t => {
                    if (t.assignedTo !== "هنوز ارجاع نشده") {
                        ticketCountByUser[t.assignedTo] = (ticketCountByUser[t.assignedTo] || 0) + 1;
                    }
                });

                const donutLabels = Object.keys(ticketCountByUser);
                const donutValues = Object.values(ticketCountByUser);

                new Chart(document.getElementById("donutChart"), {
                    type: 'doughnut',
                    data: {
                        labels: donutLabels,
                        datasets: [{
                            data: donutValues,
                            backgroundColor: [
                                '#3b82f6', '#f59e0b', '#10b981', '#ef4444', '#8b5cf6', '#ec4899'
                            ]
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { position: 'bottom' }
                        }
                    }
                });

                // 2. Bar Chart - تعداد تیکت‌ها برای هر وضعیت به ازای هر کارشناس
                const statusTypes = ["در انتظار بررسی", "در حال انجام", "انجام شده", "باطل شده"];
                const userStatusCounts = {};

                itUsers.forEach(u => {
                    userStatusCounts[u.fullName] = { "در انتظار بررسی": 0, "در حال انجام": 0, "انجام شده": 0, "باطل شده": 0 };
                });

                tickets.forEach(t => {
                    if (t.assignedTo !== "هنوز ارجاع نشده") {
                        const status = t.status ?? "در انتظار بررسی";
                        userStatusCounts[t.assignedTo][status] += 1;
                    }
                });

                const barLabels = Object.keys(userStatusCounts);
                const barDatasets = statusTypes.map((status, i) => ({
                    label: status,
                    data: barLabels.map(user => userStatusCounts[user][status]),
                    backgroundColor: ['#facc15', '#3b82f6', '#10b981', '#ef4444'][i]
                }));

                new Chart(document.getElementById("barChart"), {
                    type: 'bar',
                    data: {
                        labels: barLabels,
                        datasets: barDatasets
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { position: 'top' }
                        },
                        scales: {
                            x: { stacked: true },
                            y: { stacked: true, beginAtZero: true }
                        }
                    }
                });

            } catch (error) {
                console.error("Error loading chart data:", error);
            }
        });
    </script>


}